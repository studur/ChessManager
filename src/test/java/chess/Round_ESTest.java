/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 27 14:56:28 GMT 2018
 */

package chess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import chess.Game;
import chess.Player;
import chess.Round;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Round_ESTest extends Round_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Round round0 = new Round();
      int int0 = round0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Round round0 = new Round();
      Game game0 = new Game((Player) null, (Player) null, (-1607.07577586899));
      round0.addGame(game0);
      int int0 = round0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Round round0 = new Round();
      List<Game> list0 = round0.getGames();
      Round round1 = new Round(list0);
      Game game0 = new Game((Player) null, (Player) null, (-1392.0));
      // Undeclared exception!
      try { 
        round1.addGame(game0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Round round0 = new Round((List<Game>) null);
      Player player0 = new Player("JR0Gbv4T", "mr=Y6c-P0\nOD!", 5605.896F);
      Game game0 = new Game(player0, player0, 1380);
      // Undeclared exception!
      try { 
        round0.addGame(game0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chess.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Round round0 = new Round((List<Game>) null);
      // Undeclared exception!
      try { 
        round0.getGames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Round round0 = new Round((List<Game>) null);
      // Undeclared exception!
      try { 
        round0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chess.Round", e);
      }
  }
}
