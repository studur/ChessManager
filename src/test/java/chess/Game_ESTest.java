/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 27 14:55:05 GMT 2018
 */

package chess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import chess.Game;
import chess.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Player player0 = new Player("", "w{c9{il=ZH]fi", (-1210.0753F));
      Player player1 = new Player(" w{c9{il=ZH]fi", "Z^I:24`_WwBr", 0);
      double double0 = Game.getDeltaFromGame(player1, player0, (-2008.255929604));
      assertEquals((-64296.189747328), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Player player0 = new Player("[Y,|,aRKTw", "[Y,|,aRKTw", 0.0F);
      Player player1 = new Player("Name=Ij6 Ij6, rating=-1.0", (String) null, (-1364.7394F));
      double double0 = Game.getDeltaFromGame(player1, player0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Player player0 = new Player("1V&Kh-KM}RH+", "1V&Kh-KM}RH+", 0.0F);
      // Undeclared exception!
      try { 
        Game.getDeltaFromGame(player0, (Player) null, 2594.4445);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chess.Game", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Player player0 = new Player("[Y,|,aRKTw", "[Y,|,aRKTw", 0.0F);
      Player player1 = new Player("Ij6", "Ij6", (-1.0F));
      double double0 = Game.getDeltaFromGame(player1, player0, 2750.0);
      assertEquals(87984.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Player player0 = new Player("", "", (-1.0F));
      Game game0 = new Game(player0, player0, (-1.0));
      double double0 = Game.getDeltaFromGame(game0.player1, player0, 0.0);
      assertEquals((-16.0), double0, 0.01);
      assertEquals((-1.0), game0.result, 0.01);
  }
}
