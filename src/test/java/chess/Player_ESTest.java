/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 27 14:56:44 GMT 2018
 */

package chess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import chess.Player;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Player player0 = new Player("Name=", "chess.Player", 1.0F);
      assertEquals(1.0, player0.oldRating, 0.01);
      
      player0.oldRating = (-1.0);
      int int0 = player0.compareTo(player0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Player player0 = new Player("y", "", (-2817.005F));
      assertEquals((-2817.0048828125), player0.oldRating, 0.01);
      
      player0.oldRating = (-766.5696833032335);
      String string0 = player0.toString();
      assertEquals("Name=y , rating=-2817.0048828125", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Player player0 = new Player("Name=", "chess.Player", 1.0F);
      // Undeclared exception!
      try { 
        player0.compareTo((Player) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chess.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Player player0 = new Player("", "", (-841.71F));
      Player player1 = new Player("", "", 0);
      int int0 = player0.compareTo(player1);
      assertEquals((-1), int0);
      assertEquals(0, player1.ties);
      assertEquals(0.0, player1.oldRating, 0.01);
      assertEquals(0, player1.losses);
      assertEquals(0.0, player1.score, 0.01);
      assertEquals(0, player1.wins);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Player player0 = new Player("", "", (-841.71F));
      Player player1 = new Player("", "", 0);
      int int0 = player1.compareTo(player0);
      assertEquals(0.0, player1.oldRating, 0.01);
      assertEquals(0, player1.ties);
      assertEquals(1, int0);
      assertEquals(0, player1.wins);
      assertEquals(0, player1.losses);
      assertEquals(0.0, player1.score, 0.01);
  }
}
